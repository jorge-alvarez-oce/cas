apply plugin: "war"
ext {
    mainClassName = "org.apereo.cas.web.CasWebApplication"
}
description = "Apereo CAS Web Application"


sourceSets {
    main {
        resources {
            srcDirs "${project.buildDir}/generated-src/main/resources"
        }
    }
    /**
     * Make resources become reloadable.
     * Applicationâ€™s static resources are loaded from their source location.
     */
    bootRun {
        resources {
            srcDirs new File("//etc/cas/templates/"),
                    new File("${project(":webapp").getProjectDir()}/cas-server-webapp-resources/src/main/resources/")
            //,
              //      new File("${project(":support").getProjectDir()}/cas-server-support-thymeleaf/src/main/resources/"),
                //    new File("${project(":support").getProjectDir()}/cas-server-support-themes-collection/src/main/resources/")
        }
    }
}

apply from: rootProject.file("gradle/springboot.gradle")

dependencies {
    implementation dependencies.create("org.apereo.cas:cas-server-core:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-core-audit:6.4.3")


    implementation dependencies.create("org.apereo.cas:cas-server-core-authentication:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-core-configuration:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-core-cookie:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-core-logout:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-core-logging:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-core-services:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-core-tickets:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-core-util:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-core-validation:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-core-web:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-core-notifications:6.4.3")

    compileOnlyApi dependencies.create("org.apereo.cas:cas-server-support-jpa-util:6.4.3")

    implementation dependencies.create("org.apereo.cas:cas-server-support-actions:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-support-person-directory:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-support-themes:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-support-validation:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-support-thymeleaf:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-support-pm-webflow:6.4.3")

    implementation dependencies.create("org.apereo.cas:cas-server-webapp-config:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-webapp-init:6.4.3")
    implementation dependencies.create("org.apereo.cas:cas-server-webapp-resources:6.4.3")
    
    // Add modules in format compatible with overlay casModules property
    if (project.hasProperty("casModules")) {
        def dependencies = project.getProperty("casModules").split(",")
        dependencies.each {
            def projectsToAdd = rootProject.subprojects.findAll {project ->
                def pattern = /cas-server-${it}|cas-server-core-${it}|cas-server-support-${it}/
                logger.debug("Matching ${pattern} against CAS module ${project.name}")
                project.name.matches(pattern)
            }

            ansi.green("Including CAS module(s): ${projectsToAdd}")
            projectsToAdd.each {
                implementation it
            }
        }
    }

    implementation libraries.springcloudconfigclient
    if (!rootProject.publishFlag) {
        runtimeOnly libraries.springbootdevtools
    }

}
